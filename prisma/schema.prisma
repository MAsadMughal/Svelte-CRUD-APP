// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model Instruction {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  duration    Int
  previewFile String 
  steps       Step[]
  assets      InstructionAsset[]
  createdBy   User      @relation("InstructionCreatedBy", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User      @relation("InstructionUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int
  deletedBy   User?     @relation("InstructionDeletedBy", fields: [deletedById], references: [id])
  deletedById Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Step {
  id           Int       @id @default(autoincrement())
  type         String    // (image, video, pdf, text)
  title        String
  description  String
  stepNr       Int
  attachedFile String?   // store file path or URL
  instruction  Instruction @relation(fields: [instructionId], references: [id])
  instructionId Int
  createdBy    User       @relation("StepCreatedBy", fields: [createdById], references: [id])
  createdById  Int
  updatedBy    User       @relation("StepUpdatedBy", fields: [updatedById], references: [id])
  updatedById  Int
  deletedBy    User?      @relation("StepDeletedBy", fields: [deletedById], references: [id])
  deletedById  Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Asset {
  id          Int       @id @default(autoincrement())
  name        String
  assetFiles  String[]
  instructions InstructionAsset[]
  createdBy   User      @relation("AssetCreatedBy", fields: [createdById], references: [id])
  createdById Int
  updatedBy   User      @relation("AssetUpdatedBy", fields: [updatedById], references: [id])
  updatedById Int
  deletedBy   User?     @relation("AssetDeletedBy", fields: [deletedById], references: [id])
  deletedById Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model InstructionAsset {
  instructionId Int
  assetId       Int
  instruction   Instruction @relation(fields: [instructionId], references: [id])
  asset         Asset       @relation(fields: [assetId], references: [id])
  @@id([instructionId, assetId])
}

model User {
  id         Int        @id @default(autoincrement())
  name       String
  createdInstructions Instruction[] @relation("InstructionCreatedBy")
  updatedInstructions Instruction[] @relation("InstructionUpdatedBy")
  deletedInstructions Instruction[] @relation("InstructionDeletedBy")
  createdSteps        Step[]        @relation("StepCreatedBy")
  updatedSteps        Step[]        @relation("StepUpdatedBy")
  deletedSteps        Step[]        @relation("StepDeletedBy")
  createdAssets       Asset[]       @relation("AssetCreatedBy")
  updatedAssets       Asset[]       @relation("AssetUpdatedBy")
  deletedAssets       Asset[]       @relation("AssetDeletedBy")
}
